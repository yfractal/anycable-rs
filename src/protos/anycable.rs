// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `anycable.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct ConnectionRequest {
    // message fields
    pub path: ::std::string::String,
    pub headers: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConnectionRequest {
    fn default() -> &'a ConnectionRequest {
        <ConnectionRequest as ::protobuf::Message>::default_instance()
    }
}

impl ConnectionRequest {
    pub fn new() -> ConnectionRequest {
        ::std::default::Default::default()
    }

    // string path = 1;


    pub fn get_path(&self) -> &str {
        &self.path
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::string::String) {
        self.path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::string::String {
        &mut self.path
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.path, ::std::string::String::new())
    }

    // repeated .anycable.ConnectionRequest.HeadersEntry headers = 2;


    pub fn get_headers(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.headers
    }
    pub fn clear_headers(&mut self) {
        self.headers.clear();
    }

    // Param is passed by value, moved
    pub fn set_headers(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.headers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_headers(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.headers
    }

    // Take field
    pub fn take_headers(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.headers, ::std::collections::HashMap::new())
    }
}

impl ::protobuf::Message for ConnectionRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.path)?;
                },
                2 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.headers)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.path);
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(2, &self.headers);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.path.is_empty() {
            os.write_string(1, &self.path)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(2, &self.headers, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConnectionRequest {
        ConnectionRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "path",
                    |m: &ConnectionRequest| { &m.path },
                    |m: &mut ConnectionRequest| { &mut m.path },
                ));
                fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                    "headers",
                    |m: &ConnectionRequest| { &m.headers },
                    |m: &mut ConnectionRequest| { &mut m.headers },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ConnectionRequest>(
                    "ConnectionRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ConnectionRequest {
        static mut instance: ::protobuf::lazy::Lazy<ConnectionRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ConnectionRequest,
        };
        unsafe {
            instance.get(ConnectionRequest::new)
        }
    }
}

impl ::protobuf::Clear for ConnectionRequest {
    fn clear(&mut self) {
        self.path.clear();
        self.headers.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConnectionRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConnectionRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConnectionResponse {
    // message fields
    pub status: Status,
    pub identifiers: ::std::string::String,
    pub transmissions: ::protobuf::RepeatedField<::std::string::String>,
    pub error_msg: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConnectionResponse {
    fn default() -> &'a ConnectionResponse {
        <ConnectionResponse as ::protobuf::Message>::default_instance()
    }
}

impl ConnectionResponse {
    pub fn new() -> ConnectionResponse {
        ::std::default::Default::default()
    }

    // .anycable.Status status = 1;


    pub fn get_status(&self) -> Status {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = Status::ERROR;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: Status) {
        self.status = v;
    }

    // string identifiers = 2;


    pub fn get_identifiers(&self) -> &str {
        &self.identifiers
    }
    pub fn clear_identifiers(&mut self) {
        self.identifiers.clear();
    }

    // Param is passed by value, moved
    pub fn set_identifiers(&mut self, v: ::std::string::String) {
        self.identifiers = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_identifiers(&mut self) -> &mut ::std::string::String {
        &mut self.identifiers
    }

    // Take field
    pub fn take_identifiers(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.identifiers, ::std::string::String::new())
    }

    // repeated string transmissions = 3;


    pub fn get_transmissions(&self) -> &[::std::string::String] {
        &self.transmissions
    }
    pub fn clear_transmissions(&mut self) {
        self.transmissions.clear();
    }

    // Param is passed by value, moved
    pub fn set_transmissions(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.transmissions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_transmissions(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.transmissions
    }

    // Take field
    pub fn take_transmissions(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.transmissions, ::protobuf::RepeatedField::new())
    }

    // string error_msg = 4;


    pub fn get_error_msg(&self) -> &str {
        &self.error_msg
    }
    pub fn clear_error_msg(&mut self) {
        self.error_msg.clear();
    }

    // Param is passed by value, moved
    pub fn set_error_msg(&mut self, v: ::std::string::String) {
        self.error_msg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error_msg(&mut self) -> &mut ::std::string::String {
        &mut self.error_msg
    }

    // Take field
    pub fn take_error_msg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.error_msg, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ConnectionResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.identifiers)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.transmissions)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.error_msg)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.status != Status::ERROR {
            my_size += ::protobuf::rt::enum_size(1, self.status);
        }
        if !self.identifiers.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.identifiers);
        }
        for value in &self.transmissions {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        if !self.error_msg.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.error_msg);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.status != Status::ERROR {
            os.write_enum(1, self.status.value())?;
        }
        if !self.identifiers.is_empty() {
            os.write_string(2, &self.identifiers)?;
        }
        for v in &self.transmissions {
            os.write_string(3, &v)?;
        };
        if !self.error_msg.is_empty() {
            os.write_string(4, &self.error_msg)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConnectionResponse {
        ConnectionResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Status>>(
                    "status",
                    |m: &ConnectionResponse| { &m.status },
                    |m: &mut ConnectionResponse| { &mut m.status },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "identifiers",
                    |m: &ConnectionResponse| { &m.identifiers },
                    |m: &mut ConnectionResponse| { &mut m.identifiers },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "transmissions",
                    |m: &ConnectionResponse| { &m.transmissions },
                    |m: &mut ConnectionResponse| { &mut m.transmissions },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "error_msg",
                    |m: &ConnectionResponse| { &m.error_msg },
                    |m: &mut ConnectionResponse| { &mut m.error_msg },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ConnectionResponse>(
                    "ConnectionResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ConnectionResponse {
        static mut instance: ::protobuf::lazy::Lazy<ConnectionResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ConnectionResponse,
        };
        unsafe {
            instance.get(ConnectionResponse::new)
        }
    }
}

impl ::protobuf::Clear for ConnectionResponse {
    fn clear(&mut self) {
        self.status = Status::ERROR;
        self.identifiers.clear();
        self.transmissions.clear();
        self.error_msg.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConnectionResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConnectionResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CommandMessage {
    // message fields
    pub command: ::std::string::String,
    pub identifier: ::std::string::String,
    pub connection_identifiers: ::std::string::String,
    pub data: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CommandMessage {
    fn default() -> &'a CommandMessage {
        <CommandMessage as ::protobuf::Message>::default_instance()
    }
}

impl CommandMessage {
    pub fn new() -> CommandMessage {
        ::std::default::Default::default()
    }

    // string command = 1;


    pub fn get_command(&self) -> &str {
        &self.command
    }
    pub fn clear_command(&mut self) {
        self.command.clear();
    }

    // Param is passed by value, moved
    pub fn set_command(&mut self, v: ::std::string::String) {
        self.command = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_command(&mut self) -> &mut ::std::string::String {
        &mut self.command
    }

    // Take field
    pub fn take_command(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.command, ::std::string::String::new())
    }

    // string identifier = 2;


    pub fn get_identifier(&self) -> &str {
        &self.identifier
    }
    pub fn clear_identifier(&mut self) {
        self.identifier.clear();
    }

    // Param is passed by value, moved
    pub fn set_identifier(&mut self, v: ::std::string::String) {
        self.identifier = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_identifier(&mut self) -> &mut ::std::string::String {
        &mut self.identifier
    }

    // Take field
    pub fn take_identifier(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.identifier, ::std::string::String::new())
    }

    // string connection_identifiers = 3;


    pub fn get_connection_identifiers(&self) -> &str {
        &self.connection_identifiers
    }
    pub fn clear_connection_identifiers(&mut self) {
        self.connection_identifiers.clear();
    }

    // Param is passed by value, moved
    pub fn set_connection_identifiers(&mut self, v: ::std::string::String) {
        self.connection_identifiers = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_connection_identifiers(&mut self) -> &mut ::std::string::String {
        &mut self.connection_identifiers
    }

    // Take field
    pub fn take_connection_identifiers(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.connection_identifiers, ::std::string::String::new())
    }

    // string data = 4;


    pub fn get_data(&self) -> &str {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::string::String) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::string::String {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.data, ::std::string::String::new())
    }
}

impl ::protobuf::Message for CommandMessage {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.command)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.identifier)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.connection_identifiers)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.command.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.command);
        }
        if !self.identifier.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.identifier);
        }
        if !self.connection_identifiers.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.connection_identifiers);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.command.is_empty() {
            os.write_string(1, &self.command)?;
        }
        if !self.identifier.is_empty() {
            os.write_string(2, &self.identifier)?;
        }
        if !self.connection_identifiers.is_empty() {
            os.write_string(3, &self.connection_identifiers)?;
        }
        if !self.data.is_empty() {
            os.write_string(4, &self.data)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CommandMessage {
        CommandMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "command",
                    |m: &CommandMessage| { &m.command },
                    |m: &mut CommandMessage| { &mut m.command },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "identifier",
                    |m: &CommandMessage| { &m.identifier },
                    |m: &mut CommandMessage| { &mut m.identifier },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "connection_identifiers",
                    |m: &CommandMessage| { &m.connection_identifiers },
                    |m: &mut CommandMessage| { &mut m.connection_identifiers },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "data",
                    |m: &CommandMessage| { &m.data },
                    |m: &mut CommandMessage| { &mut m.data },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CommandMessage>(
                    "CommandMessage",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CommandMessage {
        static mut instance: ::protobuf::lazy::Lazy<CommandMessage> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CommandMessage,
        };
        unsafe {
            instance.get(CommandMessage::new)
        }
    }
}

impl ::protobuf::Clear for CommandMessage {
    fn clear(&mut self) {
        self.command.clear();
        self.identifier.clear();
        self.connection_identifiers.clear();
        self.data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CommandMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CommandMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CommandResponse {
    // message fields
    pub status: Status,
    pub disconnect: bool,
    pub stop_streams: bool,
    pub streams: ::protobuf::RepeatedField<::std::string::String>,
    pub transmissions: ::protobuf::RepeatedField<::std::string::String>,
    pub error_msg: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CommandResponse {
    fn default() -> &'a CommandResponse {
        <CommandResponse as ::protobuf::Message>::default_instance()
    }
}

impl CommandResponse {
    pub fn new() -> CommandResponse {
        ::std::default::Default::default()
    }

    // .anycable.Status status = 1;


    pub fn get_status(&self) -> Status {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = Status::ERROR;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: Status) {
        self.status = v;
    }

    // bool disconnect = 2;


    pub fn get_disconnect(&self) -> bool {
        self.disconnect
    }
    pub fn clear_disconnect(&mut self) {
        self.disconnect = false;
    }

    // Param is passed by value, moved
    pub fn set_disconnect(&mut self, v: bool) {
        self.disconnect = v;
    }

    // bool stop_streams = 3;


    pub fn get_stop_streams(&self) -> bool {
        self.stop_streams
    }
    pub fn clear_stop_streams(&mut self) {
        self.stop_streams = false;
    }

    // Param is passed by value, moved
    pub fn set_stop_streams(&mut self, v: bool) {
        self.stop_streams = v;
    }

    // repeated string streams = 4;


    pub fn get_streams(&self) -> &[::std::string::String] {
        &self.streams
    }
    pub fn clear_streams(&mut self) {
        self.streams.clear();
    }

    // Param is passed by value, moved
    pub fn set_streams(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.streams = v;
    }

    // Mutable pointer to the field.
    pub fn mut_streams(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.streams
    }

    // Take field
    pub fn take_streams(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.streams, ::protobuf::RepeatedField::new())
    }

    // repeated string transmissions = 5;


    pub fn get_transmissions(&self) -> &[::std::string::String] {
        &self.transmissions
    }
    pub fn clear_transmissions(&mut self) {
        self.transmissions.clear();
    }

    // Param is passed by value, moved
    pub fn set_transmissions(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.transmissions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_transmissions(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.transmissions
    }

    // Take field
    pub fn take_transmissions(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.transmissions, ::protobuf::RepeatedField::new())
    }

    // string error_msg = 6;


    pub fn get_error_msg(&self) -> &str {
        &self.error_msg
    }
    pub fn clear_error_msg(&mut self) {
        self.error_msg.clear();
    }

    // Param is passed by value, moved
    pub fn set_error_msg(&mut self, v: ::std::string::String) {
        self.error_msg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error_msg(&mut self) -> &mut ::std::string::String {
        &mut self.error_msg
    }

    // Take field
    pub fn take_error_msg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.error_msg, ::std::string::String::new())
    }
}

impl ::protobuf::Message for CommandResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 1, &mut self.unknown_fields)?
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.disconnect = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.stop_streams = tmp;
                },
                4 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.streams)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.transmissions)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.error_msg)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.status != Status::ERROR {
            my_size += ::protobuf::rt::enum_size(1, self.status);
        }
        if self.disconnect != false {
            my_size += 2;
        }
        if self.stop_streams != false {
            my_size += 2;
        }
        for value in &self.streams {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        for value in &self.transmissions {
            my_size += ::protobuf::rt::string_size(5, &value);
        };
        if !self.error_msg.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.error_msg);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.status != Status::ERROR {
            os.write_enum(1, self.status.value())?;
        }
        if self.disconnect != false {
            os.write_bool(2, self.disconnect)?;
        }
        if self.stop_streams != false {
            os.write_bool(3, self.stop_streams)?;
        }
        for v in &self.streams {
            os.write_string(4, &v)?;
        };
        for v in &self.transmissions {
            os.write_string(5, &v)?;
        };
        if !self.error_msg.is_empty() {
            os.write_string(6, &self.error_msg)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CommandResponse {
        CommandResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Status>>(
                    "status",
                    |m: &CommandResponse| { &m.status },
                    |m: &mut CommandResponse| { &mut m.status },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "disconnect",
                    |m: &CommandResponse| { &m.disconnect },
                    |m: &mut CommandResponse| { &mut m.disconnect },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "stop_streams",
                    |m: &CommandResponse| { &m.stop_streams },
                    |m: &mut CommandResponse| { &mut m.stop_streams },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "streams",
                    |m: &CommandResponse| { &m.streams },
                    |m: &mut CommandResponse| { &mut m.streams },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "transmissions",
                    |m: &CommandResponse| { &m.transmissions },
                    |m: &mut CommandResponse| { &mut m.transmissions },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "error_msg",
                    |m: &CommandResponse| { &m.error_msg },
                    |m: &mut CommandResponse| { &mut m.error_msg },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CommandResponse>(
                    "CommandResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CommandResponse {
        static mut instance: ::protobuf::lazy::Lazy<CommandResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CommandResponse,
        };
        unsafe {
            instance.get(CommandResponse::new)
        }
    }
}

impl ::protobuf::Clear for CommandResponse {
    fn clear(&mut self) {
        self.status = Status::ERROR;
        self.disconnect = false;
        self.stop_streams = false;
        self.streams.clear();
        self.transmissions.clear();
        self.error_msg.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CommandResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CommandResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DisconnectRequest {
    // message fields
    pub identifiers: ::std::string::String,
    pub subscriptions: ::protobuf::RepeatedField<::std::string::String>,
    pub path: ::std::string::String,
    pub headers: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DisconnectRequest {
    fn default() -> &'a DisconnectRequest {
        <DisconnectRequest as ::protobuf::Message>::default_instance()
    }
}

impl DisconnectRequest {
    pub fn new() -> DisconnectRequest {
        ::std::default::Default::default()
    }

    // string identifiers = 1;


    pub fn get_identifiers(&self) -> &str {
        &self.identifiers
    }
    pub fn clear_identifiers(&mut self) {
        self.identifiers.clear();
    }

    // Param is passed by value, moved
    pub fn set_identifiers(&mut self, v: ::std::string::String) {
        self.identifiers = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_identifiers(&mut self) -> &mut ::std::string::String {
        &mut self.identifiers
    }

    // Take field
    pub fn take_identifiers(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.identifiers, ::std::string::String::new())
    }

    // repeated string subscriptions = 2;


    pub fn get_subscriptions(&self) -> &[::std::string::String] {
        &self.subscriptions
    }
    pub fn clear_subscriptions(&mut self) {
        self.subscriptions.clear();
    }

    // Param is passed by value, moved
    pub fn set_subscriptions(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.subscriptions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_subscriptions(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.subscriptions
    }

    // Take field
    pub fn take_subscriptions(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.subscriptions, ::protobuf::RepeatedField::new())
    }

    // string path = 3;


    pub fn get_path(&self) -> &str {
        &self.path
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::string::String) {
        self.path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::string::String {
        &mut self.path
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.path, ::std::string::String::new())
    }

    // repeated .anycable.DisconnectRequest.HeadersEntry headers = 4;


    pub fn get_headers(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.headers
    }
    pub fn clear_headers(&mut self) {
        self.headers.clear();
    }

    // Param is passed by value, moved
    pub fn set_headers(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.headers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_headers(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.headers
    }

    // Take field
    pub fn take_headers(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.headers, ::std::collections::HashMap::new())
    }
}

impl ::protobuf::Message for DisconnectRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.identifiers)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.subscriptions)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.path)?;
                },
                4 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.headers)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.identifiers.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.identifiers);
        }
        for value in &self.subscriptions {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.path);
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(4, &self.headers);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.identifiers.is_empty() {
            os.write_string(1, &self.identifiers)?;
        }
        for v in &self.subscriptions {
            os.write_string(2, &v)?;
        };
        if !self.path.is_empty() {
            os.write_string(3, &self.path)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(4, &self.headers, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DisconnectRequest {
        DisconnectRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "identifiers",
                    |m: &DisconnectRequest| { &m.identifiers },
                    |m: &mut DisconnectRequest| { &mut m.identifiers },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "subscriptions",
                    |m: &DisconnectRequest| { &m.subscriptions },
                    |m: &mut DisconnectRequest| { &mut m.subscriptions },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "path",
                    |m: &DisconnectRequest| { &m.path },
                    |m: &mut DisconnectRequest| { &mut m.path },
                ));
                fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                    "headers",
                    |m: &DisconnectRequest| { &m.headers },
                    |m: &mut DisconnectRequest| { &mut m.headers },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DisconnectRequest>(
                    "DisconnectRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DisconnectRequest {
        static mut instance: ::protobuf::lazy::Lazy<DisconnectRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DisconnectRequest,
        };
        unsafe {
            instance.get(DisconnectRequest::new)
        }
    }
}

impl ::protobuf::Clear for DisconnectRequest {
    fn clear(&mut self) {
        self.identifiers.clear();
        self.subscriptions.clear();
        self.path.clear();
        self.headers.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DisconnectRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DisconnectRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DisconnectResponse {
    // message fields
    pub status: Status,
    pub error_msg: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DisconnectResponse {
    fn default() -> &'a DisconnectResponse {
        <DisconnectResponse as ::protobuf::Message>::default_instance()
    }
}

impl DisconnectResponse {
    pub fn new() -> DisconnectResponse {
        ::std::default::Default::default()
    }

    // .anycable.Status status = 1;


    pub fn get_status(&self) -> Status {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = Status::ERROR;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: Status) {
        self.status = v;
    }

    // string error_msg = 2;


    pub fn get_error_msg(&self) -> &str {
        &self.error_msg
    }
    pub fn clear_error_msg(&mut self) {
        self.error_msg.clear();
    }

    // Param is passed by value, moved
    pub fn set_error_msg(&mut self, v: ::std::string::String) {
        self.error_msg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error_msg(&mut self) -> &mut ::std::string::String {
        &mut self.error_msg
    }

    // Take field
    pub fn take_error_msg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.error_msg, ::std::string::String::new())
    }
}

impl ::protobuf::Message for DisconnectResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.error_msg)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.status != Status::ERROR {
            my_size += ::protobuf::rt::enum_size(1, self.status);
        }
        if !self.error_msg.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.error_msg);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.status != Status::ERROR {
            os.write_enum(1, self.status.value())?;
        }
        if !self.error_msg.is_empty() {
            os.write_string(2, &self.error_msg)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DisconnectResponse {
        DisconnectResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Status>>(
                    "status",
                    |m: &DisconnectResponse| { &m.status },
                    |m: &mut DisconnectResponse| { &mut m.status },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "error_msg",
                    |m: &DisconnectResponse| { &m.error_msg },
                    |m: &mut DisconnectResponse| { &mut m.error_msg },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DisconnectResponse>(
                    "DisconnectResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DisconnectResponse {
        static mut instance: ::protobuf::lazy::Lazy<DisconnectResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DisconnectResponse,
        };
        unsafe {
            instance.get(DisconnectResponse::new)
        }
    }
}

impl ::protobuf::Clear for DisconnectResponse {
    fn clear(&mut self) {
        self.status = Status::ERROR;
        self.error_msg.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DisconnectResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DisconnectResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Status {
    ERROR = 0,
    SUCCESS = 1,
    FAILURE = 2,
}

impl ::protobuf::ProtobufEnum for Status {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Status> {
        match value {
            0 => ::std::option::Option::Some(Status::ERROR),
            1 => ::std::option::Option::Some(Status::SUCCESS),
            2 => ::std::option::Option::Some(Status::FAILURE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Status] = &[
            Status::ERROR,
            Status::SUCCESS,
            Status::FAILURE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("Status", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for Status {
}

impl ::std::default::Default for Status {
    fn default() -> Self {
        Status::ERROR
    }
}

impl ::protobuf::reflect::ProtobufValue for Status {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0eanycable.proto\x12\x08anycable\"\xa7\x01\n\x11ConnectionRequest\
    \x12\x12\n\x04path\x18\x01\x20\x01(\tR\x04path\x12B\n\x07headers\x18\x02\
    \x20\x03(\x0b2(.anycable.ConnectionRequest.HeadersEntryR\x07headers\x1a:\
    \n\x0cHeadersEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\
    \x05value\x18\x02\x20\x01(\tR\x05value:\x028\x01\"\xa3\x01\n\x12Connecti\
    onResponse\x12(\n\x06status\x18\x01\x20\x01(\x0e2\x10.anycable.StatusR\
    \x06status\x12\x20\n\x0bidentifiers\x18\x02\x20\x01(\tR\x0bidentifiers\
    \x12$\n\rtransmissions\x18\x03\x20\x03(\tR\rtransmissions\x12\x1b\n\terr\
    or_msg\x18\x04\x20\x01(\tR\x08errorMsg\"\x95\x01\n\x0eCommandMessage\x12\
    \x18\n\x07command\x18\x01\x20\x01(\tR\x07command\x12\x1e\n\nidentifier\
    \x18\x02\x20\x01(\tR\nidentifier\x125\n\x16connection_identifiers\x18\
    \x03\x20\x01(\tR\x15connectionIdentifiers\x12\x12\n\x04data\x18\x04\x20\
    \x01(\tR\x04data\"\xdb\x01\n\x0fCommandResponse\x12(\n\x06status\x18\x01\
    \x20\x01(\x0e2\x10.anycable.StatusR\x06status\x12\x1e\n\ndisconnect\x18\
    \x02\x20\x01(\x08R\ndisconnect\x12!\n\x0cstop_streams\x18\x03\x20\x01(\
    \x08R\x0bstopStreams\x12\x18\n\x07streams\x18\x04\x20\x03(\tR\x07streams\
    \x12$\n\rtransmissions\x18\x05\x20\x03(\tR\rtransmissions\x12\x1b\n\terr\
    or_msg\x18\x06\x20\x01(\tR\x08errorMsg\"\xef\x01\n\x11DisconnectRequest\
    \x12\x20\n\x0bidentifiers\x18\x01\x20\x01(\tR\x0bidentifiers\x12$\n\rsub\
    scriptions\x18\x02\x20\x03(\tR\rsubscriptions\x12\x12\n\x04path\x18\x03\
    \x20\x01(\tR\x04path\x12B\n\x07headers\x18\x04\x20\x03(\x0b2(.anycable.D\
    isconnectRequest.HeadersEntryR\x07headers\x1a:\n\x0cHeadersEntry\x12\x10\
    \n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\
    \tR\x05value:\x028\x01\"[\n\x12DisconnectResponse\x12(\n\x06status\x18\
    \x01\x20\x01(\x0e2\x10.anycable.StatusR\x06status\x12\x1b\n\terror_msg\
    \x18\x02\x20\x01(\tR\x08errorMsg*-\n\x06Status\x12\t\n\x05ERROR\x10\0\
    \x12\x0b\n\x07SUCCESS\x10\x01\x12\x0b\n\x07FAILURE\x10\x022\xda\x01\n\
    \x03RPC\x12F\n\x07Connect\x12\x1b.anycable.ConnectionRequest\x1a\x1c.any\
    cable.ConnectionResponse\"\0\x12@\n\x07Command\x12\x18.anycable.CommandM\
    essage\x1a\x19.anycable.CommandResponse\"\0\x12I\n\nDisconnect\x12\x1b.a\
    nycable.DisconnectRequest\x1a\x1c.anycable.DisconnectResponse\"\0b\x06pr\
    oto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
